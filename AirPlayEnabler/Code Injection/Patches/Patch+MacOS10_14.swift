//
//  Patch+MacOS10_14.swift
//  AirPlayEnabler
//
//  Created by Darren Mo on 2018-12-21.
//  Copyright Â© 2018 Darren Mo. All rights reserved.
//

extension Patch {
   static func makePatchesForMacOS10_14() -> [Patch] {
      return [
         makeInjectedCodePatch(),
         makeFunctionCallPatch()
      ]
   }

   private static func makeInjectedCodePatch() -> Patch {
      // c.f. "Injected Code/macOS 10.14/".
      return Patch(addressInExecutableFile: 0x100007ae0,
                   requirements: [Requirement(addressInExecutableFile: 0x1000027ad,  // _NSConcreteGlobalBlock check
                                              requiredMemoryData: MemoryData(littleEndianData: Data([0x48, 0x8D, 0x35, 0x0C, 0x4C, 0x00, 0x00]))),
                                  Requirement(addressInExecutableFile: 0x100001c3d,  // __CFConstantStringClassReference check
                                              requiredMemoryData: MemoryData(littleEndianData: Data([0x4C, 0x8D, 0x2D, 0xFC, 0x5A, 0x00, 0x00]))),
                                  Requirement(addressInExecutableFile: 0x100001468,  // ___stack_chk_guard check
                                              requiredMemoryData: MemoryData(littleEndianData: Data([0x48, 0x8B, 0x05, 0xC9, 0x5B, 0x00, 0x00]))),
                                  Requirement(addressInExecutableFile: 0x100001755,  // __stack_chk_fail check
                                              requiredMemoryData: MemoryData(littleEndianData: Data([0xE8, 0xDC, 0x37, 0x00, 0x00]))),
                                  Requirement(addressInExecutableFile: 0x100001cfe,  // os_log_create check
                                              requiredMemoryData: MemoryData(littleEndianData: Data([0xE8, 0xBD, 0x32, 0x00, 0x00]))),
                                  Requirement(addressInExecutableFile: 0x1000014cd,  // os_log_type_enabled check
                                              requiredMemoryData: MemoryData(littleEndianData: Data([0xE8, 0xF4, 0x3A, 0x00, 0x00]))),
                                  Requirement(addressInExecutableFile: 0x10000192b,  // _os_log_impl check
                                              requiredMemoryData: MemoryData(littleEndianData: Data([0xE8, 0x18, 0x36, 0x00, 0x00]))),
                                  Requirement(addressInExecutableFile: 0x100001525,  // _os_log_error_impl check
                                              requiredMemoryData: MemoryData(littleEndianData: Data([0xE8, 0x12, 0x3A, 0x00, 0x00]))),
                                  Requirement(addressInExecutableFile: 0x100002814,  // dispatch_once check
                                              requiredMemoryData: MemoryData(littleEndianData: Data([0xE8, 0x53, 0x27, 0x00, 0x00]))),
                                  Requirement(addressInExecutableFile: 0x100001f0c,  // SecRequirementCreateWithString check
                                              requiredMemoryData: MemoryData(littleEndianData: Data([0xE8, 0xF5, 0x2F, 0x00, 0x00]))),
                                  Requirement(addressInExecutableFile: 0x100001f87,  // SecStaticCodeCheckValidityWithErrors check
                                              requiredMemoryData: MemoryData(littleEndianData: Data([0xE8, 0x86, 0x2F, 0x00, 0x00]))),
                                  Requirement(addressInExecutableFile: 0x1000016ec,  // CFRelease check
                                              requiredMemoryData: MemoryData(littleEndianData: Data([0xE8, 0xA3, 0x37, 0x00, 0x00]))),
                                  Requirement(addressInExecutableFile: 0x100003157,  // sub_10000435f check
                                              requiredMemoryData: MemoryData(littleEndianData: Data([0xE8, 0x03, 0x12, 0x00, 0x00])))],
                   target: MemoryData(littleEndianData: Data(repeating: 0, count: 0x508)),
                   replacement: InjectedCode(memoryData: MemoryData(littleEndianData: Data([0x55, 0x48, 0x89, 0xE5, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xEC, 0x28, 0x49, 0x89, 0xCF, 0x49, 0x89, 0xD4, 0x49, 0x89, 0xF5, 0x48, 0x89, 0x7D, 0xC8, 0x48, 0x8B, 0x05, 0x33, 0xF5, 0xFF, 0xFF, 0x48, 0x8B, 0x00, 0x48, 0x89, 0x45, 0xD0, 0x48, 0x83, 0x3D, 0xCC, 0x04, 0x00, 0x00, 0xFF, 0x0F, 0x85, 0x22, 0x02, 0x00, 0x00, 0x48, 0x8B, 0x1D, 0xB7, 0x04, 0x00, 0x00, 0x31, 0xF6, 0x48, 0x89, 0xDF, 0xE8, 0x9B, 0xD4, 0xFF, 0xFF, 0x84, 0xC0, 0x74, 0x34, 0x49, 0x89, 0xE6, 0x48, 0x89, 0xE0, 0x4C, 0x8D, 0x40, 0xF0, 0x4C, 0x89, 0xC4, 0x66, 0xC7, 0x40, 0xF0, 0x00, 0x00, 0x48, 0x8D, 0x3D, 0xB7, 0x84, 0xFF, 0xFF, 0x48, 0x8D, 0x0D, 0x57, 0x03, 0x00, 0x00, 0x31, 0xD2, 0x41, 0xB9, 0x02, 0x00, 0x00, 0x00, 0x48, 0x89, 0xDE, 0xE8, 0xE8, 0xD3, 0xFF, 0xFF, 0x4C, 0x89, 0xF4, 0x48, 0x8D, 0x55, 0xC0, 0x48, 0xC7, 0x02, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x3D, 0x43, 0x04, 0x00, 0x00, 0x31, 0xF6, 0xE8, 0x8A, 0xD3, 0xFF, 0xFF, 0x41, 0x89, 0xC6, 0x45, 0x85, 0xF6, 0x74, 0x71, 0x48, 0x8B, 0x1D, 0x4D, 0x04, 0x00, 0x00, 0xBE, 0x10, 0x00, 0x00, 0x00, 0x48, 0x89, 0xDF, 0xE8, 0x2E, 0xD4, 0xFF, 0xFF, 0x84, 0xC0, 0x0F, 0x84, 0x20, 0x01, 0x00, 0x00, 0x4C, 0x89, 0x6D, 0xB8, 0x4D, 0x89, 0xE5, 0x4D, 0x89, 0xFC, 0x49, 0x89, 0xE7, 0x48, 0x89, 0xE0, 0x4C, 0x8D, 0x40, 0xF0, 0x4C, 0x89, 0xC4, 0xC7, 0x40, 0xF0, 0x00, 0x01, 0x00, 0x04, 0x44, 0x89, 0x70, 0xF4, 0x48, 0x8D, 0x3D, 0x37, 0x84, 0xFF, 0xFF, 0x48, 0x8D, 0x0D, 0xF7, 0x02, 0x00, 0x00, 0xBA, 0x10, 0x00, 0x00, 0x00, 0x41, 0xB9, 0x08, 0x00, 0x00, 0x00, 0x48, 0x89, 0xDE, 0xE8, 0x59, 0xD3, 0xFF, 0xFF, 0x4C, 0x89, 0xFC, 0x4D, 0x89, 0xE7, 0x4D, 0x89, 0xEC, 0x4C, 0x8B, 0x6D, 0xB8, 0xE9, 0xCB, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x55, 0xC0, 0x31, 0xF6, 0x31, 0xC9, 0x48, 0x8B, 0x7D, 0xC8, 0xE8, 0x0C, 0xD3, 0xFF, 0xFF, 0x89, 0xC3, 0x48, 0x8B, 0x7D, 0xC0, 0xE8, 0x83, 0xD2, 0xFF, 0xFF, 0x85, 0xDB, 0x0F, 0x84, 0xB9, 0x00, 0x00, 0x00, 0x81, 0xFB, 0x16, 0xFA, 0xFE, 0xFF, 0x75, 0x4C, 0x48, 0x8B, 0x1D, 0xB0, 0x03, 0x00, 0x00, 0x31, 0xF6, 0x48, 0x89, 0xDF, 0xE8, 0x94, 0xD3, 0xFF, 0xFF, 0x84, 0xC0, 0x0F, 0x84, 0x86, 0x00, 0x00, 0x00, 0x49, 0x89, 0xE6, 0x48, 0x89, 0xE0, 0x4C, 0x8D, 0x40, 0xF0, 0x4C, 0x89, 0xC4, 0x66, 0xC7, 0x40, 0xF0, 0x00, 0x00, 0x48, 0x8D, 0x3D, 0xAC, 0x83, 0xFF, 0xFF, 0x48, 0x8D, 0x0D, 0x9C, 0x02, 0x00, 0x00, 0x31, 0xD2, 0x41, 0xB9, 0x02, 0x00, 0x00, 0x00, 0x48, 0x89, 0xDE, 0xE8, 0xDD, 0xD2, 0xFF, 0xFF, 0xEB, 0x50, 0x4C, 0x8B, 0x35, 0x64, 0x03, 0x00, 0x00, 0xBE, 0x10, 0x00, 0x00, 0x00, 0x4C, 0x89, 0xF7, 0xE8, 0x45, 0xD3, 0xFF, 0xFF, 0x84, 0xC0, 0x74, 0x3B, 0x4C, 0x89, 0xF6, 0x49, 0x89, 0xE6, 0x48, 0x89, 0xE0, 0x4C, 0x8D, 0x40, 0xF0, 0x4C, 0x89, 0xC4, 0xC7, 0x40, 0xF0, 0x00, 0x01, 0x00, 0x04, 0x89, 0x58, 0xF4, 0x48, 0x8D, 0x3D, 0x5A, 0x83, 0xFF, 0xFF, 0x48, 0x8D, 0x0D, 0x6A, 0x02, 0x00, 0x00, 0xBA, 0x10, 0x00, 0x00, 0x00, 0x41, 0xB9, 0x08, 0x00, 0x00, 0x00, 0xE8, 0x7F, 0xD2, 0xFF, 0xFF, 0x4C, 0x89, 0xF4, 0x48, 0x8B, 0x7D, 0xC8, 0x4C, 0x89, 0xEE, 0x4C, 0x89, 0xE2, 0x4C, 0x89, 0xF9, 0xE8, 0x8D, 0xC6, 0xFF, 0xFF, 0x48, 0x8B, 0x1D, 0xFF, 0x02, 0x00, 0x00, 0x31, 0xF6, 0x48, 0x89, 0xDF, 0xE8, 0xE3, 0xD2, 0xFF, 0xFF, 0x84, 0xC0, 0x74, 0x34, 0x49, 0x89, 0xE6, 0x48, 0x89, 0xE0, 0x4C, 0x8D, 0x40, 0xF0, 0x4C, 0x89, 0xC4, 0x66, 0xC7, 0x40, 0xF0, 0x00, 0x00, 0x48, 0x8D, 0x3D, 0xFF, 0x82, 0xFF, 0xFF, 0x48, 0x8D, 0x0D, 0x4F, 0x02, 0x00, 0x00, 0x31, 0xD2, 0x41, 0xB9, 0x02, 0x00, 0x00, 0x00, 0x48, 0x89, 0xDE, 0xE8, 0x30, 0xD2, 0xFF, 0xFF, 0x4C, 0x89, 0xF4, 0x48, 0x8B, 0x05, 0x16, 0xF3, 0xFF, 0xFF, 0x48, 0x8B, 0x00, 0x48, 0x3B, 0x45, 0xD0, 0x75, 0x29, 0x31, 0xC0, 0x48, 0x8D, 0x65, 0xD8, 0x5B, 0x41, 0x5C, 0x41, 0x5D, 0x41, 0x5E, 0x41, 0x5F, 0x5D, 0xC3, 0x48, 0x8D, 0x3D, 0x9D, 0x02, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x4D, 0x02, 0x00, 0x00, 0xE8, 0x1D, 0xD2, 0xFF, 0xFF, 0xE9, 0xC6, 0xFD, 0xFF, 0xFF, 0xE8, 0xDD, 0xD1, 0xFF, 0xFF, 0x55, 0x48, 0x89, 0xE5, 0x48, 0x8D, 0x3D, 0x1B, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x35, 0x41, 0x00, 0x00, 0x00, 0xE8, 0x50, 0xD2, 0xFF, 0xFF, 0x48, 0x89, 0x05, 0x61, 0x02, 0x00, 0x00, 0x5D, 0xC3, 0x76, 0x38, 0x40, 0x3F, 0x30, 0x00, 0x6D, 0x6F, 0x2E, 0x64, 0x61, 0x72, 0x72, 0x65, 0x6E, 0x2E, 0x6F, 0x70, 0x74, 0x69, 0x6D, 0x75, 0x73, 0x2E, 0x70, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x2E, 0x6D, 0x61, 0x63, 0x2E, 0x61, 0x69, 0x72, 0x70, 0x6C, 0x61, 0x79, 0x2D, 0x65, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x72, 0x00, 0x49, 0x6E, 0x6A, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x43, 0x6F, 0x64, 0x65, 0x00, 0x61, 0x6E, 0x63, 0x68, 0x6F, 0x72, 0x20, 0x61, 0x70, 0x70, 0x6C, 0x65, 0x20, 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x28, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x6C, 0x65, 0x61, 0x66, 0x5B, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x2E, 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x36, 0x33, 0x35, 0x2E, 0x31, 0x30, 0x30, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x39, 0x5D, 0x20, 0x6F, 0x72, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x31, 0x5B, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x2E, 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x36, 0x33, 0x35, 0x2E, 0x31, 0x30, 0x30, 0x2E, 0x36, 0x2E, 0x32, 0x2E, 0x36, 0x5D, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x6C, 0x65, 0x61, 0x66, 0x5B, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x2E, 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x36, 0x33, 0x35, 0x2E, 0x31, 0x30, 0x30, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x31, 0x33, 0x5D, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x6C, 0x65, 0x61, 0x66, 0x5B, 0x73, 0x75, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x2E, 0x4F, 0x55, 0x5D, 0x20, 0x3D, 0x20, 0x50, 0x56, 0x4C, 0x51, 0x34, 0x39, 0x4C, 0x41, 0x48, 0x33, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x6F, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x6A, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x2E, 0x00, 0x00, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x3A, 0x20, 0x25, 0x64, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6F, 0x64, 0x65, 0x20, 0x64, 0x6F, 0x65, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6D, 0x65, 0x65, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x2E, 0x00, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6B, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x20, 0x6D, 0x65, 0x65, 0x74, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x3A, 0x20, 0x25, 0x64, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x69, 0x6E, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x72, 0x75, 0x6E, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x6A, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6F, 0x64, 0x65, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x7D, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0xD1, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x59, 0x7D, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x77, 0x7F, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC8, 0xD1, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xC8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x7D, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])),
                                             absoluteAddressRanges: [0x4a7..<0x4af,  // __block_descriptor_tmp
                                                                     0x4c7..<0x4cf,  // __block_literal_global
                                                                     0x4cf..<0x4d7,
                                                                     0x4e8..<0x4f0],  // cfstring_anchor_apple_generic_and__certificate_leaf_field_1_2_840_113635_100_6_1_9__or_certificate_1
                                             externalSymbolInfos: [InjectedCode.ExternalSymbolInfo(absoluteAddressRange: 0x4b7..<0x4bf,  // External Symbol: _NSConcreteGlobalBlock
                                                                                                   replaceWithPointerValueAt: 0x1000073c0),
                                                                   InjectedCode.ExternalSymbolInfo(absoluteAddressRange: 0x4d8..<0x4e0,  // External Symbol: __CFConstantStringClassReference
                                                                                                   replaceWithPointerValueAt: 0x100007740)],
                                             writableRanges: [0x497..<0x4a7,  // __block_descriptor_tmp
                                                              0x4af..<0x4b7,
                                                              0x4bf..<0x4c7,  // __block_literal_global
                                                              0x4f8..<0x500,  // _RunInjectedCode.log
                                                              0x500..<0x508]),  // _RunInjectedCode.onceToken
                   originalMemoryProtection: VM_PROT_READ | VM_PROT_WRITE)
   }

   private static func makeFunctionCallPatch() -> Patch {
      // Replaces `call sub_10000435f` with `call _RunInjectedCode`.
      // The requirements ensure that the arguments to the call are what we expect.
      return Patch(addressInExecutableFile: 0x100003157,
                   requirements: [Requirement(addressInExecutableFile: 0x100003142,
                                              requiredMemoryData: MemoryData(littleEndianData: Data([0x48, 0x8B, 0x4D, 0x30, 0x48, 0x8D, 0x55, 0x88, 0xC7, 0x02, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x7D, 0xC8, 0x4C, 0x89, 0xF6])))],
                   target: MemoryData(littleEndianData: Data([0xE8, 0x03, 0x12, 0x00, 0x00])),
                   replacement: InjectedCode(memoryData: MemoryData(littleEndianData: Data([0xE8, 0x84, 0x49, 0x00, 0x00]))),
                   originalMemoryProtection: VM_PROT_READ | VM_PROT_EXECUTE)
   }
}
